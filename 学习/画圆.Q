[General]
SyntaxVersion=2
BeginHotkey=121
BeginHotkeyMod=0
PauseHotkey=19
PauseHotkeyMod=0
StopHotkey=123
StopHotkeyMod=0
RunOnce=1
EnableWindow=
MacroID=f800f1f1-d342-4224-8f67-12cef5ef0604
Description=画圆
Enable=0
AutoRun=0
[Repeat]
Type=0
Number=1
[SetupUI]
Type=1
QUI=Form1
[Relative]
SetupOCXFile=
[Comment]

[UIPackage]
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


[Script]
//Call Test(200, 300, 30, 30, "上", "逆时针", 2)
//Call Test(500, 300, 30, 30, "下", "逆时针", 2)
//Call Test(800, 300, 30, 30, "左", "逆时针", 2)
//Call Test(1100, 300, 30, 30, "右", "逆时针", 2)
//Call Test(200, 600, 30, 30, "上", "顺时针", 2)
//Call Test(500, 600, 30, 30, "下", "顺时针", 2)
//Call Test(800, 600, 30, 30, "左", "顺时针", 2)
//Call Test(1100, 600, 30, 30, "右", "顺时针", 2)
Call Test(1100, 600, 30, 30, "上", "顺时针", 2, 10)

Sub Test(starPointX, starPointY, offectLengthX, offectLengthY, directionValue, rotationType, rotationTimes, posNums)
    '
    Dim direx, direy, rotax, rotay, iDRArr	
    iDRArr = Split(InitDirectionAndRotation(directionValue, rotationType), "|")
    direx = iDRArr(0)
    direy = iDRArr(1)
    rotax = iDRArr(2)
    rotay = iDRArr(3)
    
    Dim x, y
    x = 0
    y = 0
	
	
    Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
	
    LeftDown 1
	
    If rotationTimes >= 1 And posNums >= 2 Then
        x = x + direx
        y = y + direy
        Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
    End If
    
    Dim turnsNum
    turnsNum = 1
    posNum = 2
    If x = 0 Then 
        For rotationTimes
            While Abs(x + rotax) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                x = x + rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1

            Wend
				
            While Abs(y + rotay) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                y = y + rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1
            
            Wend
				
            While Abs(x - rotax) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                x = x - rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1

            Wend
				
            While Abs(y - rotay) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                y = y - rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1

            Wend
            
            If ((Abs(x) + Abs(y) + 1) ^ 2) = ((2 * turnsNum + 1) ^ 2) And turnsNum < rotationTimes Then 
                y = y - rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                turnsNum = turnsNum + 1 	
            End If  
        Next
    End If
	
/*    If y = 0 Then 
        For rotationTimes
            While Abs(y + rotay) <= turnsNum
                y = y + rotay
                TracePrint "y = " & y
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
            TracePrint "x = " & rotax	
            While Abs(x + rotax) <= turnsNum
                x = x + rotax
                
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
				
            While Abs(y - rotay) <= turnsNum
                y = y - rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
				
            While Abs(x - rotax) <= turnsNum
                x = x - rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
            
            If ((Abs(x) + Abs(y) + 1) ^ 2) = ((2 * turnsNum + 1) ^ 2) And turnsNum < rotationTimes Then 
                x = x - rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                turnsNum = turnsNum + 1 	
            End If  
        Next
    End If
    	*/
    LeftUp 1
End Sub


//TracePrint InitDirectionAndRotation("上", "逆时针")

'确定第一个格子的方向，同时确定旋转方向
Function InitDirectionAndRotation(directionValue, rotationType)
    Dim direx, direy, rotax, rotay	
    Select Case directionValue
    Case "上"
        direx = 0
        direy = -1 
        rotay = 1
        If rotationType = "顺时针" Then 
            rotax = 1	
        ElseIf rotationType = "逆时针" Then
            rotax = -1
        Else 
            TracePrint "旋转方向错误。"
        End If
    Case "下"
        direx = 0
        direy = 1
        rotay = -1
        If rotationType = "顺时针" Then 
            rotax = -1
        ElseIf rotationType = "逆时针" Then
            rotax = 1
        Else 
            TracePrint "旋转方向错误。"
        End If			
    Case "左"
        direx = -1 
        direy = 0
        rotax = 1
        If rotationType = "顺时针" Then 
            rotay = -1
        ElseIf rotationType = "逆时针" Then
            rotay = 1
        Else 
            TracePrint "旋转方向错误。"
        End If			
    Case "右"
        direx = 1 
        direy = 0
        rotax = -1
        If rotationType = "顺时针" Then 
            rotay = 1	
        ElseIf rotationType = "逆时针" Then
            rotay = -1
        Else 
            TracePrint "旋转方向错误。"
        End If			
    Case Else
        TracePrint "没有这种方向。"
    End Select
    InitDirectionAndRotation = direx & "|" & direy & "|" & rotax & "|" & rotay
End Function

Sub MoveToTargetPoint(x, y)
    MoveTo x, y
    Delay 300
End Sub













//originX = Form1.starpointX.Text
//originY = Form1.starpointY.Text
//radius = Form1.radius.Text
//
//
//Dim originX, originY, radius
//MoveTo originX, originY
//MessageBox originX & ", " & originY & ", " & radius
//
//
//moverx = - radius 
//moverxorigin = moverx
//moverxinverse = -moverx
//movery = 0
//
//MoveTo originX + moverx, originY + movery
//LeftDown 1
//
//
//
//do
//    MoveTo originX + moverx, originY + movery	
//    If (moverx = moverxinverse) Then 
//        Exit do
//    End If	
//    Delay 20
//    moverx = moverx + 1
//    movery = (radius ^ 2 - moverx ^ 2) ^ (0.5)
//Loop 
//
//Do 
//    MoveTo originX + moverx, originY + movery
//    If (moverx = moverxorigin) Then 
//        Exit do
//    End If	
//    Delay 20
//    moverx = moverx - 1
//    movery = -((radius ^ 2 - moverx ^ 2) ^ (0.5))
//	
//Loop
//
//
//LeftUp 1