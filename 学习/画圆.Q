[General]
SyntaxVersion=2
BeginHotkey=121
BeginHotkeyMod=0
PauseHotkey=19
PauseHotkeyMod=0
StopHotkey=123
StopHotkeyMod=0
RunOnce=1
EnableWindow=
MacroID=f800f1f1-d342-4224-8f67-12cef5ef0604
Description=画圆
Enable=0
AutoRun=0
[Repeat]
Type=0
Number=1
[SetupUI]
Type=1
QUI=Form1
[Relative]
SetupOCXFile=
[Comment]

[UIPackage]
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


[Script]
//Call Test(200, 300, 30, 30, "上", "逆时针", 2)
//Call Test(500, 300, 30, 30, "下", "逆时针", 2)
//Call Test(800, 300, 30, 30, "左", "逆时针", 2)
//Call Test(1100, 300, 30, 30, "右", "逆时针", 2)
//Call Test(200, 600, 30, 30, "上", "顺时针", 2)
//Call Test(500, 600, 30, 30, "下", "顺时针", 2)
//Call Test(800, 600, 30, 30, "左", "顺时针", 2)
//Call Test(1100, 600, 30, 30, "右", "顺时针", 2)
//Call Test(1100, 600, 30, 30, "上", "顺时针", 2, 10)

Sub Test(starPointX, starPointY, offectLengthX, offectLengthY, directionValue, rotationType, rotationTimes, posNums)
    '
    Dim direx, direy, rotax, rotay, iDRArr	
    iDRArr = Split(InitDirectionAndRotation(directionValue, rotationType), "|")
    direx = iDRArr(0)
    direy = iDRArr(1)
    rotax = iDRArr(2)
    rotay = iDRArr(3)
    
    Dim x, y
    x = 0
    y = 0
	
	
    Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
	
    LeftDown 1
	
    If rotationTimes >= 1 And posNums >= 2 Then
        x = x + direx
        y = y + direy
        Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
    End If
    
    Dim turnsNum
    turnsNum = 1
    posNum = 2
    If x = 0 Then 
        For rotationTimes
            While Abs(x + rotax) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                x = x + rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1

            Wend
				
            While Abs(y + rotay) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                y = y + rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1
            
            Wend
				
            While Abs(x - rotax) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                x = x - rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1

            Wend
				
            While Abs(y - rotay) <= turnsNum
                If posNum >= posNums Then 
                    Exit For
                End If
                y = y - rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                posNum = posNum + 1

            Wend
            
            If ((Abs(x) + Abs(y) + 1) ^ 2) = ((2 * turnsNum + 1) ^ 2) And turnsNum < rotationTimes Then 
                y = y - rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                turnsNum = turnsNum + 1 	
            End If  
        Next
    End If
	
/*    If y = 0 Then 
        For rotationTimes
            While Abs(y + rotay) <= turnsNum
                y = y + rotay
                TracePrint "y = " & y
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
            TracePrint "x = " & rotax	
            While Abs(x + rotax) <= turnsNum
                x = x + rotax
                
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
				
            While Abs(y - rotay) <= turnsNum
                y = y - rotay
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
				
            While Abs(x - rotax) <= turnsNum
                x = x - rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
            Wend
            
            If ((Abs(x) + Abs(y) + 1) ^ 2) = ((2 * turnsNum + 1) ^ 2) And turnsNum < rotationTimes Then 
                x = x - rotax
                Call MoveToTargetPoint(starPointX + x * offectLengthX, starPointY + y * offectLengthY)
                turnsNum = turnsNum + 1 	
            End If  
        Next
    End If
    	*/
    LeftUp 1
End Sub


//TracePrint InitDirectionAndRotation("上", "逆时针")

'确定第一个格子的方向，同时确定旋转方向
Function InitDirectionAndRotation(directionValue, rotationType)
    Dim direx, direy, rotax, rotay	
    Select Case directionValue
    Case "上"
        direx = 0
        direy = -1 
        rotay = 1
        If rotationType = "顺时针" Then 
            rotax = 1	
        ElseIf rotationType = "逆时针" Then
            rotax = -1
        Else 
            TracePrint "旋转方向错误。"
        End If
    Case "下"
        direx = 0
        direy = 1
        rotay = -1
        If rotationType = "顺时针" Then 
            rotax = -1
        ElseIf rotationType = "逆时针" Then
            rotax = 1
        Else 
            TracePrint "旋转方向错误。"
        End If			
    Case "左"
        direx = -1 
        direy = 0
        rotax = 1
        If rotationType = "顺时针" Then 
            rotay = -1
        ElseIf rotationType = "逆时针" Then
            rotay = 1
        Else 
            TracePrint "旋转方向错误。"
        End If			
    Case "右"
        direx = 1 
        direy = 0
        rotax = -1
        If rotationType = "顺时针" Then 
            rotay = 1	
        ElseIf rotationType = "逆时针" Then
            rotay = -1
        Else 
            TracePrint "旋转方向错误。"
        End If			
    Case Else
        TracePrint "没有这种方向。"
    End Select
    InitDirectionAndRotation = direx & "|" & direy & "|" & rotax & "|" & rotay
End Function

Sub MoveToTargetPoint(x, y)
    MoveTo x, y
    Delay 300
End Sub



ddd = SearchEnemy(1000, 500, 100, 100)

Function SearchEnemy(starPointX, starPointY, offectX, offectY)
    //Call GameMove(starPointX, starPointY, 500)
    //LeftDown 1
    MoveTo starPointX, starPointY
    Delay 2000
    
    Dim x, y
    For i = 1 To 4
        x = 0
        y = 0   	
        Select Case i
        Case 1
            x = -1
        Case 2
            y = -1
        Case 3
            y = 1
        Case 4
            x = 1
        End Select
    	
    	//Call GameMove(starPointX + x * offectX, starPointY + y * offectY, 800)
    	MoveTo starPointX + x * offectX, starPointY + y * offectY
    	Delay 2000
    	
    	/*If FindEnemyPic() <> "" Then 
    		LeftUp 1
    		SearchEnemy = True
    		Exit Function
    	End If
    	   	*/
    Next
    //LeftUp 1
    SearchEnemy = False
End Function





//originX = Form1.starpointX.Text
//originY = Form1.starpointY.Text
//radius = Form1.radius.Text
//
//
//Dim originX, originY, radius
//MoveTo originX, originY
//MessageBox originX & ", " & originY & ", " & radius
//
//
//moverx = - radius 
//moverxorigin = moverx
//moverxinverse = -moverx
//movery = 0
//
//MoveTo originX + moverx, originY + movery
//LeftDown 1
//
//
//
//do
//    MoveTo originX + moverx, originY + movery	
//    If (moverx = moverxinverse) Then 
//        Exit do
//    End If	
//    Delay 20
//    moverx = moverx + 1
//    movery = (radius ^ 2 - moverx ^ 2) ^ (0.5)
//Loop 
//
//Do 
//    MoveTo originX + moverx, originY + movery
//    If (moverx = moverxorigin) Then 
//        Exit do
//    End If	
//    Delay 20
//    moverx = moverx - 1
//    movery = -((radius ^ 2 - moverx ^ 2) ^ (0.5))
//	
//Loop
//
//
//LeftUp 1